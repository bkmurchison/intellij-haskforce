HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DerivingVia00001')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.newtype ('newtype')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Foo')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Foo')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bar')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.deriving ('deriving')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('stock')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Generic')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Eq')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Show')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.deriving ('deriving')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('anyclass')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Spam')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.deriving ('deriving')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('ToJSON')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FromJSON')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('via')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bar')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.deriving ('deriving')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('via')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Eggs')
WHITE_SPACE (' ')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ToJSON')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Baz')
HaskellTokenType.Synthetic rightbrace ('')