Haskell File
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('TypeFamilies00001')
    PsiElement(HaskellTokenType.where)('where')
  PsiComment(HaskellTokenType.comment)('-- Mostly copy-pasta from https://stackoverflow.com/questions/20870432/type-family-vs-data-family-in-brief\n')
  BODY
    CLASSDECL
      PsiElement(HaskellTokenType.class)('class')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('GMapKey')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('k')
      PsiElement(HaskellTokenType.where)('where')
      CDECL
        PsiElement(HaskellTokenType.data)('data')
        CTYPE
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('GMap')
            ATYPE
              TYVAR
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('k')
        PsiElement(HaskellTokenType.::)('::')
        KIND
          BKIND
            AKIND
              PsiElement(HaskellTokenType.*)('*')
          PsiElement(HaskellTokenType.->)('->')
          KIND
            BKIND
              AKIND
                PsiElement(HaskellTokenType.*)('*')
      CDECL
        GENDECL
          VARS
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('empty')
          PsiElement(HaskellTokenType.::)('::')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('GMap')
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('k')
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('v')
      CDECL
        GENDECL
          VARS
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('lookup')
          PsiElement(HaskellTokenType.::)('::')
          CTYPE
            TYPEE
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('k')
              PsiElement(HaskellTokenType.->)('->')
              TYPEE
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('GMap')
                ATYPE
                  TYVAR
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('k')
                ATYPE
                  TYVAR
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('v')
                PsiElement(HaskellTokenType.->)('->')
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Maybe')
                  ATYPE
                    TYVAR
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('v')
      CDECL
        GENDECL
          VARS
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('insert')
          PsiElement(HaskellTokenType.::)('::')
          CTYPE
            TYPEE
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('k')
              PsiElement(HaskellTokenType.->)('->')
              TYPEE
                ATYPE
                  TYVAR
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('v')
                PsiElement(HaskellTokenType.->)('->')
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('GMap')
                  ATYPE
                    TYVAR
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('k')
                  ATYPE
                    TYVAR
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('v')
                  PsiElement(HaskellTokenType.->)('->')
                  TYPEE
                    ATYPE
                      OQTYCON
                        QTYCON
                          TYCON
                            CONID
                              PsiElement(HaskellTokenType.conidRegexp)('GMap')
                    ATYPE
                      TYVAR
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('k')
                    ATYPE
                      TYVAR
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('v')
    CLASSDECL
      PsiElement(HaskellTokenType.class)('class')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Collects')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('ce')
      PsiElement(HaskellTokenType.where)('where')
      CDECL
        PsiElement(HaskellTokenType.type)('type')
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Elem')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('ce')
      CDECL
        GENDECL
          VARS
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('empty')
          PsiElement(HaskellTokenType.::)('::')
          CTYPE
            TYPEE
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('ce')
      CDECL
        GENDECL
          VARS
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('insert')
          PsiElement(HaskellTokenType.::)('::')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Elem')
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('ce')
              PsiElement(HaskellTokenType.->)('->')
              TYPEE
                ATYPE
                  TYVAR
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('ce')
                PsiElement(HaskellTokenType.->)('->')
                TYPEE
                  ATYPE
                    TYVAR
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('ce')
      CDECL
        GENDECL
          VARS
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('member')
          PsiElement(HaskellTokenType.::)('::')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Elem')
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('ce')
              PsiElement(HaskellTokenType.->)('->')
              TYPEE
                ATYPE
                  TYVAR
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('ce')
                PsiElement(HaskellTokenType.->)('->')
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Bool')
      CDECL
        GENDECL
          VARS
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('toList')
          PsiElement(HaskellTokenType.::)('::')
          CTYPE
            TYPEE
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('ce')
              PsiElement(HaskellTokenType.->)('->')
              TYPEE
                ATYPE
                  PsiElement(HaskellTokenType.[)('[')
                  CTYPE
                    TYPEE
                      ATYPE
                        OQTYCON
                          QTYCON
                            TYCON
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('Elem')
                      ATYPE
                        TYVAR
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('ce')
                  PsiElement(HaskellTokenType.])(']')
    TYPEDECL
      PsiElement(HaskellTokenType.type)('type')
      PsiElement(HaskellTokenType.family)('family')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Foo')
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      PsiElement(HaskellTokenType.family)('family')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Bar')
    CLASSDECL
      PsiElement(HaskellTokenType.class)('class')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('C')
      PsiElement(HaskellTokenType.where)('where')
      CDECL
        PsiElement(HaskellTokenType.type)('type')
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Foo')
      CDECL
        PsiElement(HaskellTokenType.data)('data')
        CTYPE
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Bar')
      PsiComment(HaskellTokenType.comment)('-- Declare a family of type synonyms, called `Element`\n')
      PsiComment(HaskellTokenType.comment)('-- `Element` has kind `* -> *`; it takes one parameter, which we call `container`\n')
    TYPEDECL
      PsiElement(HaskellTokenType.type)('type')
      PsiElement(HaskellTokenType.family)('family')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Element')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('container')
    PsiComment(HaskellTokenType.comment)('-- ByteString is a container for Word8, so...\n')
    PsiComment(HaskellTokenType.comment)('-- The Element of a `S.ByteString` is a `Word8`\n')
    TYPEDECL
      PsiElement(HaskellTokenType.type)('type')
      PsiElement(HaskellTokenType.instance)('instance')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Element')
        ATYPE
          OQTYCON
            QTYCON
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('S')
              PsiElement(HaskellTokenType..)('.')
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('ByteString')
      PsiElement(HaskellTokenType.=)('=')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Word8')
    PsiComment(HaskellTokenType.comment)('-- and the Element of a `L.ByteString` is also `Word8`\n')
    TYPEDECL
      PsiElement(HaskellTokenType.type)('type')
      PsiElement(HaskellTokenType.instance)('instance')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Element')
        ATYPE
          OQTYCON
            QTYCON
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('L')
              PsiElement(HaskellTokenType..)('.')
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('ByteString')
      PsiElement(HaskellTokenType.=)('=')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Word8')
    PsiComment(HaskellTokenType.comment)('-- Declare a list-like data family\n')
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      PsiElement(HaskellTokenType.family)('family')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('XList')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('a')
    PsiComment(HaskellTokenType.comment)('-- Declare a list-like instance for Char\n')
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      PsiElement(HaskellTokenType.instance)('instance')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('XList')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Char')
      PsiElement(HaskellTokenType.=)('=')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('XCons')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Char')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('XList')
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Char')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('XNil')
    PsiComment(HaskellTokenType.comment)('-- Declare a number-like instance for ()\n')
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      PsiElement(HaskellTokenType.instance)('instance')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('XList')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('()')
      PsiElement(HaskellTokenType.=)('=')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('XListUnit')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Int')
    PsiComment(HaskellTokenType.comment)('-- ERROR: "Multiple declarations of `XListUnit'"\n')
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      PsiElement(HaskellTokenType.instance)('instance')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('XList')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('()')
      PsiElement(HaskellTokenType.=)('=')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('XListUnit')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Bool')
    PsiComment(HaskellTokenType.comment)('-- (Note: GHCI accepts this; the new declaration just replaces the previous one.)')