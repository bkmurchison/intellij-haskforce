Haskell File
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Type00007')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    TYPEDECL
      PsiElement(HaskellTokenType.type)('type')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Foo')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('f')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.=)('=')
      CTYPE
        CLSCONTEXT
          ATYPE
            PsiElement(HaskellTokenType.()('(')
            CTYPE
              TYPEE
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Functor')
                ATYPE
                  TYVAR
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('f')
            PsiElement(HaskellTokenType.,)(',')
            CTYPE
              TYPEE
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Traversable')
                ATYPE
                  TYVAR
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('f')
            PsiElement(HaskellTokenType.))(')')
        PsiElement(HaskellTokenType.=>)('=>')
        CTYPE
          TYPEE
            ATYPE
              TYVAR
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('f')
            ATYPE
              TYVAR
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('a')
    TYPEDECL
      PsiElement(HaskellTokenType.type)('type')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Bar')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('f')
      PsiElement(HaskellTokenType.=)('=')
      CTYPE
        PsiElement(HaskellTokenType.forall)('forall')
        TV_BNDR
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('x')
        PsiElement(HaskellTokenType..)('.')
        CTYPE
          TYPEE
            ATYPE
              TYVAR
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('f')
            ATYPE
              TYVAR
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('x')
    TYPEDECL
      PsiElement(HaskellTokenType.type)('type')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Baz')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('f')
      PsiElement(HaskellTokenType.=)('=')
      CTYPE
        PsiElement(HaskellTokenType.forall)('forall')
        TV_BNDR
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('x')
        PsiElement(HaskellTokenType..)('.')
        CTYPE
          CLSCONTEXT
            ATYPE
              PsiElement(HaskellTokenType.()('(')
              CTYPE
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Functor')
                  ATYPE
                    TYVAR
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('f')
              PsiElement(HaskellTokenType.,)(',')
              CTYPE
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Traversable')
                  ATYPE
                    TYVAR
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('f')
              PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.=>)('=>')
          CTYPE
            TYPEE
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('f')
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('x')