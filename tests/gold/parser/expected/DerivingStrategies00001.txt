Haskell File
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('DerivingStrategies00001')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Foo')
      PsiElement(HaskellTokenType.=)('=')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Foo')
      PsiElement(HaskellTokenType.deriving)('deriving')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('stock')
      PsiElement(HaskellTokenType.()('(')
      QTYCLS
        TYCLS
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Bar')
      PsiElement(HaskellTokenType.))(')')
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Foo')
      PsiElement(HaskellTokenType.=)('=')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Foo')
      PsiElement(HaskellTokenType.deriving)('deriving')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('anyclass')
      PsiElement(HaskellTokenType.()('(')
      QTYCLS
        TYCLS
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Bar')
      PsiElement(HaskellTokenType.))(')')
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Foo')
      PsiElement(HaskellTokenType.=)('=')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Foo')
      PsiElement(HaskellTokenType.deriving)('deriving')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('stock')
      PsiElement(HaskellTokenType.()('(')
      QTYCLS
        TYCLS
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Bar')
      PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.deriving)('deriving')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('anyclass')
      PsiElement(HaskellTokenType.()('(')
      QTYCLS
        TYCLS
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Bar')
      PsiElement(HaskellTokenType.))(')')
    NEWTYPEDECL
      PsiElement(HaskellTokenType.newtype)('newtype')
      TYCON
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Foo')
      PsiElement(HaskellTokenType.=)('=')
      NEWCONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Foo')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Int')
      PsiElement(HaskellTokenType.deriving)('deriving')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('stock')
      PsiElement(HaskellTokenType.()('(')
      QTYCLS
        TYCLS
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Bar')
      PsiElement(HaskellTokenType.))(')')
    NEWTYPEDECL
      PsiElement(HaskellTokenType.newtype)('newtype')
      TYCON
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Foo')
      PsiElement(HaskellTokenType.=)('=')
      NEWCONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Foo')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Int')
      PsiElement(HaskellTokenType.deriving)('deriving')
      PsiElement(HaskellTokenType.newtype)('newtype')
      PsiElement(HaskellTokenType.()('(')
      QTYCLS
        TYCLS
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Bar')
      PsiElement(HaskellTokenType.))(')')
    NEWTYPEDECL
      PsiElement(HaskellTokenType.newtype)('newtype')
      TYCON
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Foo')
      PsiElement(HaskellTokenType.=)('=')
      NEWCONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Foo')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Int')
      PsiElement(HaskellTokenType.deriving)('deriving')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('anyclass')
      PsiElement(HaskellTokenType.()('(')
      QTYCLS
        TYCLS
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Bar')
      PsiElement(HaskellTokenType.))(')')
    NEWTYPEDECL
      PsiElement(HaskellTokenType.newtype)('newtype')
      TYCON
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Foo')
      PsiElement(HaskellTokenType.=)('=')
      NEWCONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Foo')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Int')
      PsiElement(HaskellTokenType.deriving)('deriving')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('stock')
      PsiElement(HaskellTokenType.()('(')
      QTYCLS
        TYCLS
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Bar')
      PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.deriving)('deriving')
      PsiElement(HaskellTokenType.newtype)('newtype')
      PsiElement(HaskellTokenType.()('(')
      QTYCLS
        TYCLS
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Bar')
      PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.deriving)('deriving')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('anyclass')
      PsiElement(HaskellTokenType.()('(')
      QTYCLS
        TYCLS
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Bar')
      PsiElement(HaskellTokenType.))(')')