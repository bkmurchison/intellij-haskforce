Haskell File
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('NamedFieldPuns')
    PsiElement(HaskellTokenType.#-})('#-}')
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Record00003')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Foo')
      PsiElement(HaskellTokenType.=)('=')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Foo')
        PsiElement(HaskellTokenType.{)('{')
        VARS
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('bar')
        PsiElement(HaskellTokenType.::)('::')
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Int')
        PsiElement(HaskellTokenType.,)(',')
        VARS
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('baz')
        PsiElement(HaskellTokenType.::)('::')
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Char')
        PsiElement(HaskellTokenType.})('}')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('mkFoo0')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Char')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Foo')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('mkFoo0')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('baz')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('Foo')
          PsiElement(HaskellTokenType.{)('{')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('bar')
          PsiElement(HaskellTokenType.,)(',')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('baz')
          PsiElement(HaskellTokenType.})('}')
        PsiElement(HaskellTokenType.where)('where')
        FUNORPATDECL
          PAT
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('bar')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('ord')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('baz')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('mkFoo1')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Char')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Foo')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('mkFoo1')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('baz')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('Foo')
          PsiElement(HaskellTokenType.{)('{')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('bar')
          PsiElement(HaskellTokenType.=)('=')
          EXP
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('ord')
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('baz')
          PsiElement(HaskellTokenType.,)(',')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('baz')
          PsiElement(HaskellTokenType.})('}')