HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Import00006')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
WHITE_SPACE ('\n  ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType., (',')
WHITE_SPACE ('\n  ')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType., (',')
WHITE_SPACE ('\n  ')
HaskellTokenType.varidRegexp ('foo')
HaskellTokenType., (',')
WHITE_SPACE ('\n  ')
HaskellTokenType.varidRegexp ('bar')
HaskellTokenType., (',')
WHITE_SPACE ('\n  ')
HaskellTokenType., (',')
WHITE_SPACE ('\n  ')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('A')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType., (',')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('M')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType., (',')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('foo')
HaskellTokenType., (',')
HaskellTokenType., (',')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('bar')
HaskellTokenType., (',')
HaskellTokenType., (',')
HaskellTokenType., (',')
HaskellTokenType.) (')')