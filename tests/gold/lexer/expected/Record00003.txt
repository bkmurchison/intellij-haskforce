HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE NamedFieldPuns ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Record00003')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Foo')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Foo')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bar')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Int')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('baz')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Char')
WHITE_SPACE (' ')
HaskellTokenType.} ('}')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('mkFoo0')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Char')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Foo')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('mkFoo0')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('baz')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Foo')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
HaskellTokenType.varidRegexp ('bar')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('baz')
HaskellTokenType.} ('}')
WHITE_SPACE ('\n  ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n  ')
HaskellTokenType.varidRegexp ('bar')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ord')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('baz')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('mkFoo1')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Char')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Foo')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('mkFoo1')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('baz')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Foo')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
HaskellTokenType.varidRegexp ('bar')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ord')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('baz')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('baz')
HaskellTokenType.} ('}')